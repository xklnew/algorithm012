    //有效的字母异位词
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size() != t.size())
        {
            return false;
        }
        int size = s.size();
        //(1)直接排序  然后比较是否相等 nlogn
        /*sort(s.begin(),s.end());
        sort(t.begin(),t.end());
        return s == t;*/
        //(2)hash遍历 然后逐一对比
        map<char,int> m1,m2;
        for(int i=0;i<size;i++)
        {
            m1[s[i]]++;
            m2[t[i]]++;
        }
        for(auto iter=m1.begin();iter!=m1.end();++iter)
        {
            if(m2[iter->first]!=iter->second)
            {
                return false;
            }
        }
        return true;

    }
};

//两数之和
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> temp;
        if(nums.size()<=2)
        {
            return temp;
        }
        //没说排序  首先排序
        sort(nums.begin(),nums.end());
        //(1)双指针
        /*int p0=0,p1=nums.size()-1;
        while(p0<p1)
        {
            if(nums[p0] + nums[p1] == target)
            {
                temp.push_back(p0);
                temp.push_back(p1);
                return temp;
            }
            if(nums[p0] + nums[p1] > target)
            {
                p1--;
            }else{
                p0++;
            }
        }
        return temp;*/
        //(2)hash
        map<int,int> m;
        for(int i=0;i<nums.size();i++)
        {
            if (m.end() != m.find(target-nums[i]))
            {
                temp.push_back(m[target-nums[i]]);
                temp.push_back(i);
                return temp;
            }
            m[nums[i]] = i;//(3,1)  (2,2)
        }
        return temp;
    }
};

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
//树的前序遍历
class Solution {
public:
    void myPreOrder(Node* root,vector<int> &res){
        if(root == NULL) return;
        res.push_back(root->val);
        for(int i=0;i<root->children.size();i++)
        {
            myPreOrder(root->children[i],res);
        }
    }

    vector<int> preorder(Node* root) {
        vector<int> res;
        if(root == NULL)
        {
            return res;
        }
        //(1)递归
        //myPreOrder(root,res);
        //(2)迭代
        stack<Node*> s;
        s.push(root);
        while(!s.empty())
        {
            Node* top = s.top();
            s.pop();
            res.push_back(top->val);
            for(int i=top->children.size()-1;i>=0;i--)
            {
                if(top->children[i]!=NULL)
                    s.push(top->children[i]);
            }
        }
        return res;
    }
};