//柠檬水找零
class Solution {
public:
    bool lemonadeChange(vector<int>& bills) {
        int a[2];
        a[0]=a[1] = 0;//三种类型钞票
        for(int i=0;i<bills.size();i++)
        {
            if(bills[i] == 5)
            {
                a[0]++;
            }
            if(bills[i] == 10)
            {
                if(a[0] <=0)
                {
                    return false;
                }
                a[1]++;
                a[0]--;
            }
             if(bills[i] == 20)
            {
                if(a[1] >=1)
                {
                    if(a[0]<=0)
                    {
                        return false;
                    }
                    a[1]--;
                    a[0]--;
                    continue;
                }
                if(a[1]==0)
                {
                    if(a[0]< 3)
                    {
                        return false;
                    }
                    a[0] -= 3;
                }
            }
        }
        return true;
    }
};
//柠檬水
class Solution {
public:
    int maxProfit(vector<int>& prices) {
         int maxprofit = 0;
        for (int i = 1; i < prices.size(); i++) {
            if (prices[i] > prices[i - 1])
                maxprofit += prices[i] - prices[i - 1];
        }
        return maxprofit;
    }
};
//分发饼干
class Solution {
public:
    int findContentChildren(vector<int>& g, vector<int>& s) {
            int gIndex =0,sIndex=0;
            sort(g.begin(),g.end());
            sort(s.begin(),s.end());
            while(sIndex <s.size() && gIndex < g.size())
            {
                if(s[sIndex] >=g[gIndex])
                {
                    gIndex++;
                    sIndex++;
                }
                else{
                    sIndex++;
                }
            }
            return gIndex;
    }
};

//跳跃游戏
class Solution {
public:
    bool canJump(vector<int>& nums) {
        if(nums.size()<=0)
        {
            return false;
        }
        int len = nums.size();
        for(int j=len-1;j>0;j--)
        {
            int p = j-1;
            while(p>=0)
            {
                if(nums[p] < j-p)
                {
                    p--;
                }else{
                    break;
                }
            }
            if(p<0)
            {
                return false;
            }
        }
        return true;
    }
};

//搜索旋转排序数组
class Solution {
public:
    //递归
    int _search(vector<int>& nums,int low, int hight,int target) {
        if(hight < low || low > hight){
            return -1;
        }
        int mid = low + (hight-low)/2;
        if(target == nums[mid]){
            return mid;
        }
        if(nums[mid] >= nums[low])
        {
            //low mid是升序区间
            if(target >= nums[low] && target < nums[mid])
            {
                return _search(nums,low,mid-1,target);
            }else{
                return _search(nums,mid+1,hight,target);
            }
        }
        if(target >=nums[mid] && target<= nums[hight])
        {
            return _search(nums,mid+1,hight,target);
        }
        return _search(nums,low,mid-1,target);
    }

    int search(vector<int>& nums, int target) {
        if(nums.size()<=0)
        {
            return -1;
        }
        //return _search(nums,0,nums.size()-1,target);
        int low = 0,high = nums.size()-1;
        while(low <= high)
        {
            int mid = low + (high-low)/2;
            if(nums[mid] == target)
            {
                return mid;
            }
            if(nums[low] <= nums[mid])//low ~ mid 单递增
            {
                if(target >= nums[low] && target < nums[mid])
                {
                    high = mid -1;
                }
                else{
                    low = mid + 1;
                }
            }else{
                if(target > nums[mid] && target <=nums[high])
                {
                    low = mid + 1;
                }else{
                    high = mid -1;
                }
            }
        }
        return -1;
    }
};
//搜索二维矩阵
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        //贪心算法
        int m = matrix.size();
        if(m <= 0 )
        {
            return false;
        }
        int n = matrix[0].size();
        int lo = 0,hi = m*n-1;
        while(lo <= hi){
            int mid = lo + (hi - lo)/2;
            int row = mid / n,col = mid %n;
            if(matrix[row][col] == target)
            {
                return true;
            }
             if(matrix[row][col] > target)
            {
                hi = mid -1;
            }else{
                lo = mid + 1;
            }
        }
        return false;
    }
};

//寻找旋转排序数组中的最小值
class Solution {
public:
    int findMin(vector<int>& nums) {
        int lo = 0,high = nums.size()-1;
        if(high <=-1)
        {
            return -1;
        }
        int min = nums[lo];
        while(lo < high)
        {
            if(high - lo  == 1 )
            {
                int cuMin = nums[lo]> nums[high] ? nums[high]:nums[lo];
                return cuMin > min?min:cuMin;
            }
            int mid = lo + (high-lo)/2;
            if(nums[lo] <= nums[mid])
            {
                lo = mid;
            }else{
                high = mid;
            }
        }
        return min;
    }
};
//跳跃问题2
class Solution {
  public:
      int jump(vector<int>& nums) {
          if(nums.size()<=0)
          {
              return 0;
          }
          int size = nums.size();
          int step = 0;
          //方式1 o(n2)时间复杂度
          /*int pos = size - 1;

          for(int i=0;i<size;i++)
          {
              int
          }
          while(pos  > 0)//要考察的元素
          {
              int curIndex = pos-1;//要考察元素的前一个位置
              for(int i= 0;i<= curIndex;i++)
              {
                  if(nums[i] >=pos - i)//位置pos到位置i可以一步跳跃
                  {
                      step++;
                      pos = i;
                      printf("the next index = %d,step=%d\n",pos,step);
                      break;
                  }
              }
          }*/
          int maxPos = 0;
          int end = 0;//当前下标到该下标  找最大能跑到的距离下标
          for(int i=0;i<size-1;i++)//[2,3,1,1,4]
          {
              maxPos = max(maxPos,i+nums[i]);//当前可以跑到的最大位置
              if(end == i)//跑到该位置了
              {
                  step++;//（1，end=2） (2,end=1+3=4)
                  end = maxPos;
              }
          }
          return step;
      }
  };